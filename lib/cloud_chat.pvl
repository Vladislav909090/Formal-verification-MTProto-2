(*
Модель сообщений между клиентом и сервером Telegram.
*)

event ClientSendsCloudMessage(Nonce, bitstring, AuthKey).
event ClientReceivesCloudMessage(Nonce, bitstring, AuthKey).
event ClientSendsCloudMessageInPhaseOne(Nonce, bitstring, AuthKey).
event ServerReceivesCloudMessage(Nonce, bitstring, AuthKey).
event ServerSendsCloudMessage(Nonce, bitstring, AuthKey).
event ServerReceivesCloudMessageInPhaseOne(Nonce, bitstring, AuthKey).

(* Конструкторы шифруемой части сообщений *)
fun SPT(Nonce, bitstring): Plaintext [data].
fun CPT(Nonce, bitstring): Plaintext [data].
fun MSG(Message): Message [data].

let ClientCloudChat(server: Principal) =
  in(io, X: Principal);
  let cUser = choosePrincipal(X, Alice, Bob) in
  get AuthKeyClientTable(=cUser, =server, authKey) in
  new sessionID: Nonce;
  new m1: bitstring;
  event ClientSendsCloudMessage(sessionID, m1, authKey);
  let msg1 = CPT(sessionID, m1) in
  out(io, MSG(encodeCloudChatMsg(msg1, authKey)));
  in(io, MSG(msg2));
  let SPT(=sessionID, m2) = clientDecodeCloudChatMsg(msg2, authKey) in
  event ClientReceivesCloudMessage(sessionID, m2, authKey);
  phase 1;
  new m3: bitstring;
  let msg3 = CPT(sessionID, m3) in
  event ClientSendsCloudMessageInPhaseOne(sessionID, m3, authKey);
  out(io, MSG(encodeCloudChatMsg(msg3, authKey)));
  0.

let ServerCloudChat() =
  in(io, MSG(msg1));
  let (CPT(sessionID, m1), authKey: AuthKey) = serverDecodeCloudChatMsg(msg1) in
  event ServerReceivesCloudMessage(sessionID, m1, authKey);
  new m2: bitstring;
  event ServerSendsCloudMessage(sessionID, m2, authKey);
  let msg2 = SPT(sessionID, m2) in
  out(io, MSG(encodeCloudChatMsg(msg2, authKey)));
  phase 1;
  in(io, MSG(msg3));
  let (CPT(=sessionID, m3), =authKey) = serverDecodeCloudChatMsg(msg3) in
  event ServerReceivesCloudMessageInPhaseOne(sessionID, m3, authKey);
  0.
